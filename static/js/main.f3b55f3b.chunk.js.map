{"version":3,"sources":["Nav/index.js","Header/index.js","LoadingSpinner/index.js","Price/index.js","Button/index.js","Picker/PickerButton.js","Picker/index.js","Coverage.js","Results/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","Header","src","process","alt","LoadingSpinner","Price","useContext","AppContext","priceLoading","currentCoverage","prices","month","year","bundle","Button","children","cls","classNames","PickerButton","CoverageType","onClick","copy","Picker","changeCoverage","set","covs","type","coverage","id","name","title","help","Results","loading","Coverage","React","createContext","App","useState","activeCoverages","setActiveCoverages","setCurrentCoverage","setPriceLoading","Provider","value","activeCov","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3b55f3b.chunk.js","sourcesContent":["import React from 'react'\n\nimport './style.scss'\n\nconst Nav = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"Nav\">\n        <a href=\"/\">1</a>\n        <a href=\"/\">2</a>\n        <a href=\"/\">3</a>\n        <a href=\"/\" className=\"active\">4</a>\n        <a href=\"/\">5</a>\n      </div>\n    </div>\n  )\n}\n\nexport default Nav","import React from 'react'\nimport Nav from 'Nav'\n\nimport './style.scss'\n\nconst Header = () => {\n  return (\n    <div className=\"Header\">\n      <div className=\"container\">\n        <div className=\"clearfix\">\n          <img className=\"inova\" src={process.env.PUBLIC_URL + '/img/inova-logo.png'} alt=\"Inova\" />\n          <img className=\"costco\" src={process.env.PUBLIC_URL + '/img/costco-logo.png'} alt=\"Costco\" />\n        </div>\n      </div>\n      <Nav />\n    </div>\n  )\n}\n\nexport default Header","import React from 'react'\n\nimport './style.scss'\n\nconst LoadingSpinner = () => {\n  return (\n    <div className=\"LoadingSpinner clearfix\">\n      <div className=\"loader-holder\">\n        <div className=\"loader\" />\n      </div>\n      <h4>Fetching your new price...</h4>\n    </div>\n  )\n}\n\nexport default LoadingSpinner","import React, { useContext } from 'react'\nimport LoadingSpinner from 'LoadingSpinner'\nimport { AppContext } from 'App'\n\nimport './style.scss'\n\nconst Price = () => {\n\n  const { priceLoading, currentCoverage } = useContext(AppContext)\n\n  const prices = {\n    'good': {\n      month: '127',\n      year: '1407',\n      bundle: '117',\n    },\n    'better': {\n      month: '137',\n      year: '1691',\n      bundle: '121',\n    },\n    'best': {\n      month: '168',\n      year: '1832',\n      bundle: '153',\n    }\n  }\n\n  return (\n    <div className=\"Price\">\n      {priceLoading ? <LoadingSpinner /> : (\n        <div>\n          <div className = \"BasePrice\">\n            <span className = \"DollarSign\">$</span>\n            <span className=\"Amount\">\n              {prices[currentCoverage].month}\n            </span>\n          </div >\n          <div className=\"PriceBreakdown\">\n            Per month, <strong>${prices[currentCoverage].year}</strong> per year<br />\n            <strong>${prices[currentCoverage].bundle}</strong> per month as part of a bundle\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Price","import React from 'react'\nimport classNames from 'classnames'\n\nimport './style.scss'\n\nconst Button = ({ children, className }) => {\n\n  const cls = classNames('Button', {\n    [className]: className,\n  })\n\n  return (\n    <button className={cls}>\n      {children}\n    </button>\n  )\n}\n\nexport default Button","import React from 'react'\nimport classNames from 'classnames'\n\nconst PickerButton = ({ CoverageType, onClick, currentCoverage }) => {\n\n  const cls = classNames('PickerButton', {\n    'Active': currentCoverage === CoverageType,\n    'Good': CoverageType === 'good',\n    'Better': CoverageType === 'better',\n    'Best': CoverageType === 'best',\n  })\n\n  const copy = () => {\n    switch(CoverageType) {\n      case 'good':\n        return <small>Base<br /> Coverage</small>\n      case 'better':\n        return <small>Costco<br /> Recommended!</small>\n      case 'best':\n        return <small>Highest<br /> Coverage</small>\n      default:\n        return <small>No coverage type provided</small>\n    }\n  }\n\n  return (\n    <button className={cls} onClick={onClick}>\n      {copy()}\n    </button>\n  )\n}\n\nexport default PickerButton","import React, { useContext } from 'react'\nimport PickerButton from './PickerButton'\nimport { AppContext } from 'App'\n\nimport './style.scss'\n\nconst Picker = () => {\n\n  const { currentCoverage, changeCoverage } = useContext(AppContext)\n\n  const set = (covs, type) => {\n    changeCoverage(covs, type)\n  }\n\n  return (\n    <div className=\"Picker\">\n      <hr />\n      <PickerButton\n        onClick={() => set([1, 2], 'good')}\n        currentCoverage={currentCoverage}\n        CoverageType=\"good\"\n      />\n      <PickerButton\n        onClick={() => set([1, 2, 3, 4], 'better')}\n        currentCoverage={currentCoverage}\n        CoverageType=\"better\"\n      />\n      <PickerButton\n        onClick={() => set([1, 2, 3, 4, 5, 6], 'best')}\n        currentCoverage={currentCoverage}\n        CoverageType=\"best\"\n      />\n    </div>\n  )\n}\n\nexport default Picker","import React from 'react'\n\nconst coverage = [\n  // {\n  //   id: 1,\n  //   name: 'deductible_comprehensive',\n  //   title: <span>Deductible<br />(Comprehensive)</span>,\n  //   help: 'Some help copy for Deductible (Comprehensive)',\n  // },\n  // {\n  //   id: 3,\n  //   name: 'deductible_collision',\n  //   title: <span>Deductible<br />(Collision)</span>,\n  //   help: 'Some help copy for Deductible (Collision)',\n  // },\n  // {\n  //   id: 5,\n  //   name: 'liability',\n  //   title: <span>$1,000,000<br />Liability</span>,\n  //   help: 'Some help copy for Liability',\n  // },\n  {\n    id: 1,\n    name: 'standard_coverage',\n    title: <span>Standard<br />Accident Benefits</span>,\n    help: 'Some help copy for Damage to Non-owned Autos',\n  },\n  {\n    id: 2,\n    name: 'damage_non_owned',\n    title: <span>Damage to<br />Non-owned Autos</span>,\n    help: 'Some help copy for Damage to Non-owned Autos',\n  },\n  {\n    id: 3,\n    name: 'waiver_depreciation',\n    title: <span>Waiver of<br />Depreciation</span>,\n    help: 'Some help copy for Waiver of Depreciation',\n  },\n  {\n    id: 4,\n    name: 'accident_waiver',\n    title: <span>Accident<br />Waiver</span>,\n    help: 'Some help copy for Accident Waiver',\n  },\n  {\n    id: 5,\n    name: 'transportation_replacement',\n    title: <span>Transportation<br />Replacement</span>,\n    help: 'Some help copy for Deductible (Collision)',\n  },\n  {\n    id: 6,\n    name: 'restriction_glass',\n    title: <span>Restriction of<br />Glass Coverage</span>,\n    help: 'Some help copy for Restriction of glass coverage',\n  },\n]\n\nexport default coverage\n","import React from 'react'\nimport Price from 'Price'\nimport Button from 'Button'\nimport Picker from 'Picker'\nimport Coverage from 'Coverage'\n\nimport './style.scss'\n\nconst Results = () => {\n  return (\n    <div className=\"Results\">\n      <div className=\"container\">\n        <h3 className=\"text-center\">Congratulations - here's your Costco Recommended quote!</h3>\n        <Price loading={true} />\n        <Button className=\"BuyNow\">\n          Buy Now\n        </Button>\n        <Picker />\n        <Coverage />\n      </div>\n    </div>\n  )\n}\n\nexport default Results","import React, { useState } from 'react'\nimport Header from 'Header'\nimport Results from 'Results'\n\nexport const AppContext = React.createContext()\n\nfunction App() {\n\n  const [activeCoverages, setActiveCoverages] = useState([1, 2, 3, 4])\n  const [currentCoverage, setCurrentCoverage] = useState('better')\n  const [priceLoading, setPriceLoading] = useState(false)\n\n  const changeCoverage = (covs = [], activeCov = 'better') => {\n    setPriceLoading(true)\n    setCurrentCoverage(activeCov)\n    setActiveCoverages(covs)\n    setTimeout(function () {\n      setPriceLoading(false)\n    }, 2000)\n  }\n\n  return (\n    <AppContext.Provider value={{\n      activeCoverages,\n      setActiveCoverages,\n      currentCoverage,\n      setCurrentCoverage,\n      priceLoading,\n      changeCoverage,\n    }}>\n      <div className=\"App\">\n        <Header />\n        <Results />\n      </div>\n    </AppContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}